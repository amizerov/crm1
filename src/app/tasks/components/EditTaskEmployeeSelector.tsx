'use client';

import { useState, useEffect } from 'react';
import { getEmployeesByCompany } from '@/app/employees/actions/actions';

interface Employee {
  id: number;
  Name: string;
  displayName?: string;
  userId?: number;
  userNicName?: string;
  userFullName?: string;
}

interface EditTaskEmployeeSelectorProps {
  task: {
    id: number;
    companyId?: number;
    executorId?: number;
  };
  currentUserId: number;
  initialEmployees: Employee[];
}

export default function EditTaskEmployeeSelector({ 
  task, 
  currentUserId, 
  initialEmployees 
}: EditTaskEmployeeSelectorProps) {
  const [employees, setEmployees] = useState<Employee[]>(initialEmployees);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const loadEmployees = async () => {
      if (!task.companyId) {
        // –î–ª—è –ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        setEmployees(initialEmployees);
        return;
      }

      setIsLoading(true);
      try {
        const newEmployees = await getEmployeesByCompany(task.companyId);
        setEmployees(newEmployees);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error);
        setEmployees([]);
      } finally {
        setIsLoading(false);
      }
    };

    loadEmployees();
  }, [task.companyId, initialEmployees]);

  return (
    <div>
      <label style={{ display: 'block', marginBottom: 5, fontWeight: 600, fontSize: 14 }}>
        –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
      </label>
      <select 
        name="executorId" 
        defaultValue={task.executorId || ''}
        disabled={isLoading}
        style={{ 
          width: '100%', 
          padding: '10px 12px', 
          border: '1px solid #ced4da', 
          borderRadius: 4,
          fontSize: 14,
          opacity: isLoading ? 0.7 : 1
        }}
      >
        <option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</option>
        {employees.map((employee: Employee) => (
          <option key={employee.id} value={employee.id}>
            {employee.displayName || employee.Name}
            {employee.userId && employee.userId === currentUserId && ' üë§ (—ç—Ç–æ –≤—ã)'}
          </option>
        ))}
      </select>
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ */}
      {task.executorId && (
        <div style={{ fontSize: 12, color: '#6c757d', marginTop: 4 }}>
          {(() => {
            const executor = employees.find((emp: Employee) => emp.id === task.executorId);
            if (executor?.userId === currentUserId) {
              return '‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —ç—Ç–æ–π –∑–∞–¥–∞—á–∏';
            }
            if (executor?.userId) {
              return `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${executor.userNicName || executor.userFullName}`;
            }
            return 'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (–±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ)';
          })()}
        </div>
      )}
    </div>
  );
}