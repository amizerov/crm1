'use client';

import { Task } from '@/app/tasks/types';
import { TaskHistoryItem, markHistoryAsViewed, markAllHistoryAsViewed } from './actions/getTasksHistory';
import Link from 'next/link';
import { useState, useTransition } from 'react';
import { useRouter } from 'next/navigation';

interface InboxViewProps {
  tasks: Task[];
  currentUserId: number;
  tasksHistory: TaskHistoryItem[];
  tasksStatsMap: Map<number, { daysFromCreation: number; currentStatus: string }>;
}

export default function InboxView({ tasks, currentUserId, tasksHistory, tasksStatsMap }: InboxViewProps) {
  const router = useRouter();
  const [isPending, startTransition] = useTransition();
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
  const sortedHistory = [...tasksHistory].sort((a, b) => 
    new Date(b.dtc).getTime() - new Date(a.dtc).getTime()
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ"
  const handleMarkAllAsRead = async () => {
    startTransition(async () => {
      await markAllHistoryAsViewed();
      router.refresh();
    });
  };

  return (
    <div className="h-full flex flex-col bg-white dark:bg-gray-900">
      {/* Header */}
      <div className="border-b border-gray-200 dark:border-gray-700 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <svg 
              className="w-8 h-8 text-blue-500" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth="2" 
                d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" 
              />
            </svg>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                –í—Ö–æ–¥—è—â–∏–µ
              </h1>
              <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º –∏ –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –≤–∞—à–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º.
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-3">
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                {sortedHistory.length} {sortedHistory.length === 1 ? '–∑–∞–ø–∏—Å—å' : '–∑–∞–ø–∏—Å–µ–π'}
              </span>
              {sortedHistory.length > 0 && (
                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-bold bg-blue-600 text-white">
                  {sortedHistory.length} –Ω–æ–≤—ã—Ö
                </span>
              )}
            </div>
            {sortedHistory.length > 0 && (
              <button
                onClick={handleMarkAllAsRead}
                disabled={isPending}
                className="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 rounded-lg transition-colors flex items-center gap-2 cursor-pointer"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ
              </button>
            )}
          </div>
        </div>
      </div>

      {/* History List */}
      <div className="flex-1 overflow-y-auto p-4">
        {sortedHistory.length === 0 ? (
          <div className="flex flex-col items-center justify-center h-full text-center">
            <div className="text-6xl mb-4">üì≠</div>
            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
              –î–ª—è –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            </h3>
          </div>
        ) : (
          <div className="space-y-2">
            {sortedHistory.map(item => (
              <HistoryCard 
                key={item.id} 
                item={item} 
                currentUserId={currentUserId}
                taskStats={tasksStatsMap.get(item.taskId)}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

function HistoryCard({ 
  item, 
  currentUserId, 
  taskStats 
}: { 
  item: TaskHistoryItem; 
  currentUserId: number;
  taskStats?: { daysFromCreation: number; currentStatus: string };
}) {
  const router = useRouter();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const isAssignedToMe = 
    (item.actionType === 'assigned' || item.actionType === 'executor_changed') && 
    item.executorId === currentUserId;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π
  const isCompleted = 
    item.actionType === 'status_changed' && 
    (item.statusName?.toLowerCase().includes('done') ||
     item.statusName?.toLowerCase().includes('completed') ||
     item.statusName?.toLowerCase().includes('–≤—ã–ø–æ–ª–Ω–µ–Ω–æ') ||
     item.statusName?.toLowerCase().includes('–∑–∞–≤–µ—Ä—à–µ–Ω–æ'));

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
  const handleClick = async (e: React.MouseEvent) => {
    e.preventDefault();
    
    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    await markHistoryAsViewed(item.id);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–¥–∞—á–µ
    router.push(`/tasks/edit/${item.taskId}`);
    router.refresh();
  };

  // –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
  const getActionIcon = () => {
    if (isAssignedToMe) return 'üë§';
    if (isCompleted) return '‚úÖ';
    
    switch (item.actionType) {
      case 'created': return '‚ûï';
      case 'status_changed': return 'üîÑ';
      case 'assigned':
      case 'executor_changed': return 'üë§';
      case 'priority_changed': return '‚ö°';
      case 'deadline_changed': return 'üìÖ';
      case 'startdate_changed': return 'ÔøΩ';
      case 'name_changed': return '‚úèÔ∏è';
      case 'description_changed': return 'üìù';
      case 'document_added': return 'üìé';
      case 'document_deleted': return 'üóëÔ∏è';
      case 'comment_added': return 'üí¨';
      case 'comment_edited': return '‚úèÔ∏è';
      case 'comment_deleted': return 'üóëÔ∏è';
      case 'moved': return '‚ÜîÔ∏è';
      case 'order_changed': return 'üîÄ';
      case 'checklist_item_added': return '‚òëÔ∏è';
      case 'checklist_item_completed': return '‚úîÔ∏è';
      case 'checklist_item_uncompleted': return '‚¨ú';
      case 'checklist_item_edited': return '‚úèÔ∏è';
      case 'checklist_item_deleted': return '‚ùå';
      case 'checklist_item_reordered': return 'üîÄ';
      default: return 'üìå';
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á. –Ω–∞–∑–∞–¥`;
    if (diffDays < 7) return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short', hour: '2-digit', minute: '2-digit' });
  };

  return (
    <div
      onClick={handleClick}
      className={`block p-4 rounded-lg border transition-all cursor-pointer ${
        isAssignedToMe
          ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-300 dark:border-blue-700 hover:border-blue-400 dark:hover:border-blue-600'
          : isCompleted
          ? 'bg-green-50 dark:bg-green-900/20 border-green-300 dark:border-green-700 hover:border-green-400 dark:hover:border-green-600'
          : 'bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700 hover:border-blue-400 dark:hover:border-blue-600'
      }`}
    >
      <div className="flex items-start gap-3">
        {/* Icon */}
        <div className="flex-shrink-0 mt-1 text-2xl">
          {getActionIcon()}
        </div>

        {/* Content */}
        <div className="flex-1 min-w-0">
          {/* Task Name & Status */}
          <div className="flex items-center gap-2 mb-1 flex-wrap">
            <h3 className="text-sm font-semibold text-gray-900 dark:text-gray-100">
              {item.taskName}
            </h3>
            {item.statusName && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                {item.statusName}
              </span>
            )}
            {isAssignedToMe && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-600 text-white">
                –ù–∞–∑–Ω–∞—á–µ–Ω–æ –≤–∞–º
              </span>
            )}
            {isCompleted && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-600 text-white">
                –ó–∞–≤–µ—Ä—à–µ–Ω–æ
              </span>
            )}
          </div>

          {/* Action Description */}
          <p className="text-sm text-gray-700 dark:text-gray-300 mb-2">
            <span className="font-medium">{item.userFullName || item.userName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
            {' '}{item.description}
          </p>

          {/* Meta Info */}
          <div className="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400 flex-wrap">
            {item.projectName && (
              <span className="flex items-center gap-1">
                üìÅ {item.projectName}
              </span>
            )}
            {item.priorityName && (
              <span className="flex items-center gap-1">
                ‚ö° {item.priorityName}
              </span>
            )}
            {item.executorName && (
              <span className="flex items-center gap-1">
                üë§ {item.executorName}
              </span>
            )}
            <span className="flex items-center gap-1">
              üïí {formatTime(item.dtc)}
            </span>
          </div>

          {/* Task Statistics */}
          {taskStats && (
            <div className="mt-2 pt-2 border-t border-gray-200 dark:border-gray-700">
              <div className="flex items-center gap-4 text-xs text-gray-600 dark:text-gray-400">
                <span className="flex items-center gap-1" title="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å">
                  üè∑Ô∏è {taskStats.currentStatus}
                </span>
                <span className="flex items-center gap-1" title="–î–Ω–µ–π —Å —Å–æ–∑–¥–∞–Ω–∏—è">
                  üìÖ {taskStats.daysFromCreation} {taskStats.daysFromCreation === 1 ? '–¥–µ–Ω—å' : taskStats.daysFromCreation < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}
                </span>
                {item.createdAt && (
                  <span className="flex items-center gap-1" title="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è">
                    ‚ú® {new Date(item.createdAt).toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' })}
                  </span>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

