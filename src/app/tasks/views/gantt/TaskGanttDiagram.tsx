'use client';

import { useMemo, useState, useTransition, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { StatusTask } from '@/app/projects/actions/statusActions';
import { Task as GanttTask, ViewMode } from './types/public-types';
import { updateTaskDates, updateTaskProgress, deleteTask } from './actions';
import TimeScaleControls from './components/TimeScaleControls';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç Gantt –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const GanttChart = dynamic(() => import('./GanttChart'), {
  ssr: false,
  loading: () => (
    <div className="flex items-center justify-center h-full bg-white dark:bg-gray-900">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
    </div>
  ),
});

interface Task {
  id: number;
  parentId?: number;
  taskName: string;
  description?: string;
  statusId: number;
  priorityId?: number;
  startDate?: string;
  dedline?: string;
  executorId?: number;
  userId?: number;
  companyId?: number;
  projectId?: number;
  dtc: string;
  dtu?: string;
  statusName: string;
  priorityName?: string;
  executorName?: string;
  level?: number;
  hasChildren?: boolean;
  orderInStatus?: number;
}

interface TaskGanttDiagramProps {
  tasks: Task[];
  statuses: StatusTask[];
  onTaskClick?: (task: Task) => void;
  isPending?: boolean;
  companyId?: number;
  projectId?: number;
  onTaskCreated?: () => void;
  selectedTaskId?: number;
  onTaskDeleted?: (taskId: number) => void;
  currentUserId?: number;
}

export default function TaskGanttDiagram({
  tasks,
  statuses,
  onTaskClick,
  isPending = false,
  companyId,
  projectId,
  onTaskCreated,
  selectedTaskId,
  onTaskDeleted,
  currentUserId
}: TaskGanttDiagramProps) {
  const [isUpdating, startTransition] = useTransition();
  const [viewMode, setViewMode] = useState<ViewMode>(ViewMode.Day);

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    try {
      const savedViewMode = localStorage.getItem('gantt_view_mode') as ViewMode;
      if (savedViewMode && Object.values(ViewMode).includes(savedViewMode)) {
        setViewMode(savedViewMode);
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—à—Ç–∞–±–∞:', error);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞—Å—à—Ç–∞–±–∞
  const getColumnWidth = (mode: ViewMode): number => {
    switch (mode) {
      case ViewMode.Hour:
        return 30;
      case ViewMode.QuarterDay:
        return 60;
      case ViewMode.HalfDay:
        return 80;
      case ViewMode.Day:
        return 65;
      case ViewMode.Week:
        return 100;
      case ViewMode.Month:
        return 120;
      case ViewMode.QuarterYear:
        return 160;
      case ViewMode.Year:
        return 200;
      default:
        return 65;
    }
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Task[] –≤ —Ñ–æ—Ä–º–∞—Ç GanttTask[]
  const ganttTasks = useMemo<GanttTask[]>(() => {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Å –¥–∞—Ç–∞–º–∏
    const tasksWithDates = tasks.filter(task => task.startDate && task.dedline);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤):
    const sortedTasks = tasksWithDates.sort((a, b) => {
      // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ (—Ä–∞–Ω—å—à–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è = –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ)
      return new Date(a.startDate!).getTime() - new Date(b.startDate!).getTime();
      
      // –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ ID (–º–µ–Ω—å—à–∏–π ID = –≤—ã—à–µ)
      // return a.id - b.id;
      
      // –í–∞—Ä–∏–∞–Ω—Ç 3: –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
      // return a.taskName.localeCompare(b.taskName, 'ru');
      
      // –í–∞—Ä–∏–∞–Ω—Ç 4: –ü–æ —Å—Ç–∞—Ç—É—Å—É (stepOrder)
      // return (statuses.find(s => s.id === a.statusId)?.stepOrder || 999) - 
      //        (statuses.find(s => s.id === b.statusId)?.stepOrder || 999);
      
      // –í–∞—Ä–∏–∞–Ω—Ç 5: –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
      // return (a.priorityId || 999) - (b.priorityId || 999);
    });
    
    console.log('üìä Gantt Tasks Debug:', {
      totalTasks: tasks.length,
      tasksWithDates: sortedTasks.length,
      sampleTask: tasks[0] ? {
        id: tasks[0].id,
        name: tasks[0].taskName,
        startDate: tasks[0].startDate,
        dedline: tasks[0].dedline,
      } : null,
    });
    
    return sortedTasks.map(task => {
      const start = new Date(task.startDate!);
      const end = new Date(task.dedline!);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ stepOrder —Å—Ç–∞—Ç—É—Å–∞
      const status = statuses.find(s => s.id === task.statusId);
      const maxStep = Math.max(...statuses.map(s => s.stepOrder), 1);
      const progress = status ? Math.round((status.stepOrder / maxStep) * 100) : 0;

      return {
        id: String(task.id),
        name: task.taskName,
        start,
        end,
        type: 'task' as const,
        progress,
        isDisabled: false,
        displayOrder: task.orderInStatus || task.id, // –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        styles: {
          backgroundColor: getStatusColor(task.statusId, statuses),
          backgroundSelectedColor: getStatusColor(task.statusId, statuses, 0.8),
          progressColor: '#10b981',
          progressSelectedColor: '#059669',
        },
        // –ï—Å–ª–∏ –µ—Å—Ç—å parentId ‚Äî —ç—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        ...(task.parentId && { dependencies: [String(task.parentId)] }),
      };
    });
  }, [tasks, statuses]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loader –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
  if (isPending) {
    return (
      <div className="flex items-center justify-center h-full bg-white dark:bg-gray-900">
        <div className="flex flex-col items-center gap-3">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <p className="text-sm text-gray-600 dark:text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</p>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á —Å –¥–∞—Ç–∞–º–∏
  if (ganttTasks.length === 0) {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    const tasksWithStartDate = tasks.filter(t => t.startDate).length;
    const tasksWithDeadline = tasks.filter(t => t.dedline).length;
    
    return (
      <div className="h-full flex items-center justify-center bg-white dark:bg-gray-900">
        <div className="text-center p-8 max-w-2xl">
          {/* –ò–∫–æ–Ω–∫–∞ */}
          <svg 
            className="w-16 h-16 mx-auto mb-4 text-gray-300 dark:text-gray-600" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={1.5} 
              d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" 
            />
          </svg>
          
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-2">
            –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          </h3>
          
          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">
            –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ –ì–∞–Ω—Ç–∞ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å <strong>–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞</strong> –∏ <strong>–¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–¥–µ–¥–ª–∞–π–Ω)</strong>
          </p>

          {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 mb-4">
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div className="text-left">
                <div className="text-gray-500 dark:text-gray-400 mb-1">–í—Å–µ–≥–æ –∑–∞–¥–∞—á:</div>
                <div className="text-xl font-semibold text-gray-900 dark:text-gray-100">{tasks.length}</div>
              </div>
              <div className="text-left">
                <div className="text-gray-500 dark:text-gray-400 mb-1">–° –æ–±–µ–∏–º–∏ –¥–∞—Ç–∞–º–∏:</div>
                <div className="text-xl font-semibold text-green-600 dark:text-green-400">{ganttTasks.length}</div>
              </div>
              <div className="text-left">
                <div className="text-gray-500 dark:text-gray-400 mb-1">–° –¥–∞—Ç–æ–π –Ω–∞—á–∞–ª–∞:</div>
                <div className="text-lg font-medium text-blue-600 dark:text-blue-400">{tasksWithStartDate}</div>
              </div>
              <div className="text-left">
                <div className="text-gray-500 dark:text-gray-400 mb-1">–° –¥–µ–¥–ª–∞–π–Ω–æ–º:</div>
                <div className="text-lg font-medium text-amber-600 dark:text-amber-400">{tasksWithDeadline}</div>
              </div>
            </div>
          </div>

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
          <div className="text-xs text-gray-500 dark:text-gray-400 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded p-3">
            üí° <strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞" –∏ "–î–µ–¥–ª–∞–π–Ω"
          </div>
        </div>
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞
  return (
    <div className="h-full flex flex-col bg-white dark:bg-gray-900">
      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex-shrink-0 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 px-4 py-3">
        <div className="flex items-center justify-between flex-wrap gap-3">
          <div className="flex items-center gap-4">
            <div className="text-sm text-gray-600 dark:text-gray-400">
              <span className="font-semibold text-gray-900 dark:text-gray-100">{ganttTasks.length}</span>
              {' '}–∑–∞–¥–∞—á —Å –¥–∞—Ç–∞–º–∏ –∏–∑{' '}
              <span className="font-semibold text-gray-900 dark:text-gray-100">{tasks.length}</span>
            </div>
            
            {ganttTasks.length > 0 && (
              <div className="hidden sm:flex items-center gap-3 text-xs text-gray-500 dark:text-gray-400">
                <span>üìç –ü—Ä–æ–µ–∫—Ç: {projectId || '–í—Å–µ'}</span>
                <span>üë• –ö–æ–º–ø–∞–Ω–∏—è: {companyId || '–í—Å–µ'}</span>
              </div>
            )}
          </div>
          
          <TimeScaleControls
            currentViewMode={viewMode}
            onViewModeChange={setViewMode}
          />
        </div>
      </div>

      {/* –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞ */}
      <div className="flex-1 overflow-hidden">
        <GanttChart
          tasks={ganttTasks}
          viewMode={viewMode}
          locale="ru-RU"
          ganttHeight={0} // 0 = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
          columnWidth={getColumnWidth(viewMode)}
          rowHeight={50}
          barCornerRadius={4}
          fontFamily="var(--font-inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif)"
          fontSize="14px"
          todayColor="rgba(59, 130, 246, 0.1)" // –°–∏–Ω–∏–π –æ—Ç—Ç–µ–Ω–æ–∫ –¥–ª—è "—Å–µ–≥–æ–¥–Ω—è"
          // Callbacks
          onDoubleClick={(task) => {
            const originalTask = tasks.find(t => String(t.id) === task.id);
            if (originalTask && onTaskClick) {
              onTaskClick(originalTask);
            }
          }}
          onDateChange={async (task, children) => {
            const taskId = parseInt(task.id);
            const startDate = task.start.toISOString().split('T')[0];
            const dedline = task.end.toISOString().split('T')[0];
            
            console.log('üìÖ Date changed:', { taskId, startDate, dedline });
            
            startTransition(async () => {
              const result = await updateTaskDates(taskId, startDate, dedline);
              
              if (result.success) {
                console.log('‚úÖ Dates saved successfully');
              } else {
                console.error('‚ùå Failed to save dates:', result.error);
                alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç: ' + result.error);
              }
            });
          }}
          onProgressChange={async (task, children) => {
            const taskId = parseInt(task.id);
            const progress = task.progress;
            
            console.log('üìä Progress changed:', { taskId, progress });
            
            startTransition(async () => {
              const result = await updateTaskProgress(taskId, progress, statuses);
              
              if (result.success) {
                console.log('‚úÖ Progress saved successfully, new status:', result.newStatusId);
              } else {
                console.error('‚ùå Failed to save progress:', result.error);
                alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ' + result.error);
              }
            });
          }}
          onDelete={async (task) => {
            const taskId = parseInt(task.id);
            const confirmed = confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${task.name}"?`);
            
            if (!confirmed) return false;
            
            console.log('üóëÔ∏è Deleting task:', taskId);
            
            startTransition(async () => {
              const result = await deleteTask(taskId);
              
              if (result.success) {
                console.log('‚úÖ Task deleted successfully');
                if (onTaskDeleted) {
                  onTaskDeleted(taskId);
                }
              } else {
                console.error('‚ùå Failed to delete task:', result.error);
                alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + result.error);
              }
            });
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤ UI
            return true;
          }}
          onClick={(task) => {
            const originalTask = tasks.find(t => String(t.id) === task.id);
            if (originalTask && onTaskClick) {
              onTaskClick(originalTask);
            }
          }}
        />
      </div>
    </div>
  );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusColor(statusId: number, statuses: StatusTask[], opacity: number = 1): string {
  const status = statuses.find(s => s.id === statusId);
  if (!status) return `rgba(156, 163, 175, ${opacity})`; // gray-400
  
  // –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ stepOrder
  const colors = [
    [59, 130, 246],   // blue-500
    [139, 92, 246],   // violet-500
    [16, 185, 129],   // green-500
    [245, 158, 11],   // amber-500
    [239, 68, 68],    // red-500
    [236, 72, 153],   // pink-500
    [14, 165, 233],   // sky-500
    [132, 204, 22],   // lime-500
  ];
  
  const colorIndex = status.stepOrder % colors.length;
  const [r, g, b] = colors[colorIndex];
  
  return `rgba(${r}, ${g}, ${b}, ${opacity})`;
}
