'use server';

import { revalidatePath } from 'next/cache';
import { getConnection, sql } from '@/db/connect';

interface UpdateTaskProgressResult {
  success: boolean;
  newStatusId?: number;
  error?: string;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * 
 * @param taskId - ID –∑–∞–¥–∞—á–∏
 * @param progress - –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 100
 * @param statuses - –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
 */
export async function updateTaskProgress(
  taskId: number,
  progress: number,
  statuses: Array<{ id: number; stepOrder: number; status: string }>
): Promise<UpdateTaskProgressResult> {
  try {
    console.log('üìä updateTaskProgress:', { taskId, progress });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (progress < 0 || progress > 100) {
      return {
        success: false,
        error: '–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100',
      };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const sortedStatuses = [...statuses].sort((a, b) => a.stepOrder - b.stepOrder);
    const maxStep = Math.max(...statuses.map(s => s.stepOrder));
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π stepOrder –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const targetStep = Math.round((progress / 100) * maxStep);
    
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Å—Ç–∞—Ç—É—Å
    let newStatus = sortedStatuses[0];
    for (const status of sortedStatuses) {
      if (status.stepOrder <= targetStep) {
        newStatus = status;
      } else {
        break;
      }
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å = 100%, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ stepOrder)
    if (progress === 100) {
      const completedStatus = sortedStatuses[sortedStatuses.length - 1];
      if (completedStatus) {
        newStatus = completedStatus;
      }
    }

    console.log('üéØ New status:', { 
      progress, 
      targetStep, 
      newStatusId: newStatus.id, 
      stepOrder: newStatus.stepOrder 
    });

    const poolConnection = await getConnection();
    
    const result = await poolConnection.request()
      .input('taskId', sql.Int, taskId)
      .input('statusId', sql.Int, newStatus.id)
      .query(`
        UPDATE Task 
        SET 
          statusId = @statusId,
          dtu = GETDATE()
        WHERE id = @taskId
      `);

    console.log('‚úÖ Task progress updated:', result.rowsAffected);

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á
    revalidatePath('/tasks/views');
    
    return { 
      success: true,
      newStatusId: newStatus.id,
    };
    
  } catch (error) {
    console.error('‚ùå Error updating task progress:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    };
  }
}
