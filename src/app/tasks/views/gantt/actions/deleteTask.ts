'use server';

import { revalidatePath } from 'next/cache';
import { getConnection, sql } from '@/db/connect';

interface DeleteTaskResult {
  success: boolean;
  error?: string;
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É —Å –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Delete –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
 * 
 * @param taskId - ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
export async function deleteTask(taskId: number): Promise<DeleteTaskResult> {
  try {
    console.log('üóëÔ∏è deleteTask:', { taskId });

    const poolConnection = await getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∑–∞–¥–∞—á–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏
    const checkSubtasks = await poolConnection.request()
      .input('taskId', sql.Int, taskId)
      .query(`
        SELECT COUNT(*) as count 
        FROM Task 
        WHERE parentId = @taskId
      `);

    const hasSubtasks = checkSubtasks.recordset[0].count > 0;

    if (hasSubtasks) {
      return {
        success: false,
        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –ø–æ–¥–∑–∞–¥–∞—á–∏.',
      };
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    const result = await poolConnection.request()
      .input('taskId', sql.Int, taskId)
      .query(`
        DELETE FROM Tasks 
        WHERE id = @taskId
      `);

    if (result.rowsAffected[0] === 0) {
      return {
        success: false,
        error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      };
    }

    console.log('‚úÖ Task deleted:', result.rowsAffected);

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á
    revalidatePath('/tasks/views');
    
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå Error deleting task:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    };
  }
}
