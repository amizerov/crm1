'use client';

import { useState, useEffect, useTransition } from 'react';
import { getTasks } from '../../actions/getTasks';
import LeftPanel from './LeftPanel';
import KanbanBoard from './KanbanBoard';
import TaskDetailsPanel from './TaskDetailsPanel';

interface Task {
  id: number;
  parentId?: number;
  taskName: string;
  description?: string;
  statusId: number;
  priorityId?: number;
  startDate?: string;
  dedline?: string;
  executorId?: number;
  userId?: number;
  companyId?: number;
  dtc: string;
  dtu?: string;
  statusName: string;
  priorityName?: string;
  executorName?: string;
  level?: number;
  hasChildren?: boolean;
}

interface UserCompany {
  id: number;
  companyName: string;
  isOwner: boolean;
}

interface Status {
  id: number;
  status: string;
}

interface DeskViewProps {
  initialTasks: Task[];
  userCompanies: UserCompany[];
  statuses: Status[];
  currentUserId: number;
}

export default function DeskView({ 
  initialTasks, 
  userCompanies, 
  statuses,
  currentUserId 
}: DeskViewProps) {
  const [tasks, setTasks] = useState<Task[]>(initialTasks);
  const [selectedCompanyId, setSelectedCompanyId] = useState<number>(0);
  const [selectedProjectId, setSelectedProjectId] = useState<number | null>(null);
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [isFullscreen, setIsFullscreen] = useState<boolean>(true);
  const [isPending, startTransition] = useTransition();

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  useEffect(() => {
    const savedCompanyId = localStorage.getItem('selectedCompanyId');
    if (savedCompanyId) {
      const companyId = parseInt(savedCompanyId);
      if (companyId === 0 || userCompanies.some(c => c.id === companyId)) {
        setSelectedCompanyId(companyId);
        if (companyId !== 0) {
          handleCompanyChange(companyId);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const savedFullscreen = localStorage.getItem('deskFullscreen');
    if (savedFullscreen !== null) {
      setIsFullscreen(savedFullscreen === 'true');
    }
  }, [userCompanies]);

  // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º header –∏ footer –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ isFullscreen
  useEffect(() => {
    const header = document.querySelector('header');
    const footer = document.querySelector('footer');
    const main = document.querySelector('main');
    const body = document.body;
    const html = document.documentElement;
    
    if (isFullscreen) {
      // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
      if (header) header.style.display = 'none';
      if (footer) footer.style.display = 'none';
      body.style.overflow = 'hidden';
      html.style.overflow = 'hidden';
    } else {
      // –°–≤–µ—Ä–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º
      if (header) header.style.display = '';
      if (footer) footer.style.display = '';
      
      // –î–µ–ª–∞–µ–º body flexbox —Å –≤—ã—Å–æ—Ç–æ–π 100vh
      body.style.overflow = 'hidden';
      html.style.overflow = 'hidden';
      body.style.height = '100vh';
      body.style.display = 'flex';
      body.style.flexDirection = 'column';
      
      // Main —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –∏ –∏–º–µ–µ—Ç overflow-hidden
      if (main) {
        main.style.flex = '1';
        main.style.overflow = 'hidden';
        main.style.minHeight = '0';
      }
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (header) header.style.display = '';
      if (footer) footer.style.display = '';
      body.style.overflow = '';
      html.style.overflow = '';
      body.style.height = '';
      body.style.display = '';
      body.style.flexDirection = '';
      if (main) {
        main.style.flex = '';
        main.style.overflow = '';
        main.style.minHeight = '';
      }
    };
  }, [isFullscreen]);

  const toggleFullscreen = () => {
    const newFullscreen = !isFullscreen;
    setIsFullscreen(newFullscreen);
    localStorage.setItem('deskFullscreen', newFullscreen.toString());
  };

  const handleCompanyChange = (companyId: number) => {
    setSelectedCompanyId(companyId);
    localStorage.setItem('selectedCompanyId', companyId.toString());
    
    startTransition(async () => {
      const newTasks = await getTasks(undefined, companyId === 0 ? undefined : companyId);
      setTasks(newTasks);
    });
  };

  const handleTaskClick = (task: Task) => {
    setSelectedTask(task);
  };

  const handleClosePanel = () => {
    setSelectedTask(null);
  };

  return (
    <div 
      className="flex flex-col bg-gray-50 dark:bg-gray-900"
      style={{
        height: isFullscreen ? '100vh' : '100%',
        position: isFullscreen ? 'fixed' : 'relative',
        top: isFullscreen ? 0 : 'auto',
        left: isFullscreen ? 0 : 'auto',
        right: isFullscreen ? 0 : 'auto',
        zIndex: isFullscreen ? 9999 : 'auto',
        width: '100%',
        overflow: 'hidden'
      }}
    >
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ */}
      <div className="flex-shrink-0 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-2 flex items-center justify-between gap-3">
        <div className="flex items-center gap-2">
          <h1 className="text-lg font-bold text-gray-900 dark:text-gray-100 whitespace-nowrap">
            üìã –î–æ—Å–∫–∞ –∑–∞–¥–∞—á
          </h1>
        </div>
        <div className="flex items-center gap-2 flex-wrap">
          {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
          <button
            onClick={toggleFullscreen}
            className="
              px-2 py-1.5
              bg-purple-600 hover:bg-purple-700 
              dark:bg-purple-500 dark:hover:bg-purple-600
              text-white
              rounded
              text-xs font-medium
              transition-colors
              flex items-center gap-1
              whitespace-nowrap
            "
            title={isFullscreen ? '–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω'}
          >
            <span className="text-sm">‚§¢</span>
            <span className="hidden sm:inline">{isFullscreen ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}</span>
          </button>
          
          <a
            href="/tasks"
            className="
              px-2 py-1.5
              bg-gray-200 hover:bg-gray-300 
              dark:bg-gray-700 dark:hover:bg-gray-600
              text-gray-900 dark:text-gray-100
              rounded
              text-xs font-medium
              no-underline inline-flex items-center gap-1
              transition-colors
              whitespace-nowrap
            "
          >
            <span>üìä</span>
            <span className="hidden sm:inline">–¢–∞–±–ª–∏—Ü–∞</span>
          </a>
          <a
            href="/tasks/add"
            className="
              px-2 py-1.5
              bg-green-600 hover:bg-green-700 
              dark:bg-green-500 dark:hover:bg-green-600
              text-white
              rounded
              text-xs font-medium
              no-underline inline-flex items-center gap-1
              transition-colors
              whitespace-nowrap
            "
          >
            <span>+</span>
            <span className="hidden sm:inline">–î–æ–±–∞–≤–∏—Ç—å</span>
          </a>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ */}
      <div className="flex flex-1 min-h-0">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –ü—Ä–æ–µ–∫—Ç—ã */}
        <LeftPanel 
          userCompanies={userCompanies}
          selectedCompanyId={selectedCompanyId}
          onCompanyChange={handleCompanyChange}
          isPending={isPending}
        />

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - Kanban –¥–æ—Å–∫–∞ */}
        <div className="flex-1 min-w-0">
          <KanbanBoard 
            tasks={tasks}
            statuses={statuses}
            onTaskClick={handleTaskClick}
            isPending={isPending}
          />
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ */}
        {selectedTask && (
          <TaskDetailsPanel 
            task={selectedTask}
            onClose={handleClosePanel}
          />
        )}
      </div>
    </div>
  );
}
