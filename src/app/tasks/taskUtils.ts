export type Task = {
  id: number;
  parentId?: number;
  taskName: string;
  description?: string;
  statusId: number;
  priorityId?: number;
  startDate?: string;
  dedline?: string;
  executorId?: number;
  dtc: string;
  dtu?: string;
  statusName: string;
  priorityName?: string;
  executorName?: string;
  level?: number;
  hasChildren?: boolean;
};

export type FilterType = 'all' | 'important' | 'forgotten' | 'overdue' | 'my' | 'unassigned' | 'completed';

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á
export const taskUtils = {
  // –í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏: –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ò–õ–ò –±–ª–∏–∑–∫–∏–π –¥–µ–¥–ª–∞–π–Ω –ò–õ–ò —Å—Ç–∞—Ç—É—Å "–ö—Ä–∏—Ç–∏—á–Ω–æ"
  isImportant: (task: Task): boolean => {
    // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (ID 1 –æ–±—ã—á–Ω–æ = –í—ã—Å–æ–∫–∏–π)
    const isHighPriority = task.priorityId === 1 || task.priorityName?.toLowerCase().includes('–≤—ã—Å–æ–∫') || task.priorityName?.toLowerCase().includes('–∫—Ä–∏—Ç–∏—á');
    
    // –ë–ª–∏–∑–∫–∏–π –¥–µ–¥–ª–∞–π–Ω (–º–µ–Ω–µ–µ 3 –¥–Ω–µ–π)
    let hasNearDeadline = false;
    if (task.dedline) {
      const deadlineDate = new Date(task.dedline);
      const today = new Date();
      const diffDays = Math.ceil((deadlineDate.getTime() - today.getTime()) / (1000 * 3600 * 24));
      hasNearDeadline = diffDays <= 3 && diffDays >= 0;
    }
    
    // –ö—Ä–∏—Ç–∏—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    const isCriticalStatus = task.statusName?.toLowerCase().includes('–∫—Ä–∏—Ç–∏—á') || task.statusName?.toLowerCase().includes('—Å—Ä–æ—á–Ω');
    
    return isHighPriority || hasNearDeadline || isCriticalStatus;
  },

  // –ó–∞–±—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏: –¥–∞–≤–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å (–±–æ–ª–µ–µ 7 –¥–Ω–µ–π) –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
  isForgotten: (task: Task): boolean => {
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (statusId = 5)
    const isCompleted = task.statusId === 5 || task.statusName?.toLowerCase().includes('–≥–æ—Ç–æ–≤') || task.statusName?.toLowerCase().includes('–∑–∞–≤–µ—Ä—à–µ–Ω') || task.statusName?.toLowerCase().includes('–∑–∞–∫—Ä—ã—Ç');
    if (isCompleted) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const lastUpdate = task.dtu ? new Date(task.dtu) : new Date(task.dtc);
    const today = new Date();
    const diffDays = Math.ceil((today.getTime() - lastUpdate.getTime()) / (1000 * 3600 * 24));
    
    return diffDays > 7;
  },

  // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª, –Ω–æ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  isOverdue: (task: Task): boolean => {
    if (!task.dedline) return false;
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (statusId = 5)
    const isCompleted = task.statusId === 5 || task.statusName?.toLowerCase().includes('–≥–æ—Ç–æ–≤') || task.statusName?.toLowerCase().includes('–∑–∞–≤–µ—Ä—à–µ–Ω') || task.statusName?.toLowerCase().includes('–∑–∞–∫—Ä—ã—Ç');
    if (isCompleted) return false;
    
    const deadlineDate = new Date(task.dedline);
    const today = new Date();
    today.setHours(0, 0, 0, 0); // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã
    deadlineDate.setHours(0, 0, 0, 0);
    
    return deadlineDate < today;
  },

  // –ú–æ–∏ –∑–∞–¥–∞—á–∏: –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  isMy: (task: Task, currentUserId: number): boolean => {
    return task.executorId === currentUserId;
  },

  // –ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  isUnassigned: (task: Task): boolean => {
    return !task.executorId;
  },

  // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ID = 5 (–ì–æ—Ç–æ–≤–æ)
  isCompleted: (task: Task): boolean => {
    return task.statusId === 5 || 
           task.statusName?.toLowerCase() === '–≥–æ—Ç–æ–≤–æ' || 
           task.statusName?.toLowerCase().includes('–∑–∞–≤–µ—Ä—à–µ–Ω') || 
           task.statusName?.toLowerCase().includes('–≤—ã–ø–æ–ª–Ω–µ–Ω');
  },

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —Ç–∏–ø—É
  filterTasks: (tasks: Task[], filterType: FilterType, currentUserId?: number): Task[] => {
    switch (filterType) {
      case 'important':
        return tasks.filter(task => taskUtils.isImportant(task));
      case 'forgotten':
        return tasks.filter(task => taskUtils.isForgotten(task));
      case 'overdue':
        return tasks.filter(task => taskUtils.isOverdue(task));
      case 'my':
        return currentUserId ? tasks.filter(task => taskUtils.isMy(task, currentUserId)) : [];
      case 'unassigned':
        return tasks.filter(task => taskUtils.isUnassigned(task));
      case 'completed':
        return tasks.filter(task => taskUtils.isCompleted(task));
      case 'all':
      default:
        return tasks;
    }
  },

  // –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  countTasksByCategories: (tasks: Task[], currentUserId?: number) => {
    return {
      all: tasks.length,
      important: tasks.filter(task => taskUtils.isImportant(task)).length,
      forgotten: tasks.filter(task => taskUtils.isForgotten(task)).length,
      overdue: tasks.filter(task => taskUtils.isOverdue(task)).length,
      my: currentUserId ? tasks.filter(task => taskUtils.isMy(task, currentUserId)).length : 0,
      unassigned: tasks.filter(task => taskUtils.isUnassigned(task)).length,
      completed: tasks.filter(task => taskUtils.isCompleted(task)).length,
    };
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏
  getTaskIndicator: (task: Task): { color: string; icon: string; tooltip: string } | null => {
    if (taskUtils.isOverdue(task)) {
      return { color: '#e83e8c', icon: '‚ö°', tooltip: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞' };
    }
    if (taskUtils.isImportant(task)) {
      return { color: '#dc3545', icon: 'üî•', tooltip: '–í–∞–∂–Ω–∞—è' };
    }
    if (taskUtils.isForgotten(task)) {
      return { color: '#fd7e14', icon: '‚è∞', tooltip: '–ó–∞–±—ã—Ç–∞—è' };
    }
    return null;
  }
};
