'use client';

import { useState } from 'react';
import Link from 'next/link';
import WindowsWindow from '@/components/WindowsWindow';
import { Employee } from '@/app/employees/actions';

interface Task {
  id: number;
  taskName: string;
  description?: string;
  statusId: number;
  priorityId?: number;
  startDate?: string;
  dedline?: string;
  executorId?: number;
  userId?: number; // –°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  parentId?: number;
  companyId?: number;
}

interface TaskStatus {
  id: number;
  status: string;
}

interface Priority {
  id: number;
  priority: string;
}

interface ParentTask {
  id: number;
  taskName: string;
  level: number;
}

interface UserCompany {
  id: number;
  companyName: string;
  isOwner: boolean;
}

interface TaskPropertyProps {
  task: Task;
  statuses: TaskStatus[];
  priorities: Priority[];
  employees: Employee[];
  parentTasks: ParentTask[];
  userCompanies: UserCompany[];
  currentUserId: number;
  onSubmit: (formData: FormData) => Promise<void>;
  onDelete: (taskId: number, taskName: string) => Promise<void>;
}

export default function TaskProperty({ 
  task, 
  statuses, 
  priorities, 
  employees, 
  parentTasks, 
  userCompanies, 
  currentUserId,
  onSubmit,
  onDelete 
}: TaskPropertyProps) {
  
  const [isExpanded, setIsExpanded] = useState(false);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è input date
  const formatDateForInput = (dateString: string) => {
    const date = new Date(dateString);
    return date.toISOString().split('T')[0];
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    onSubmit(formData);
  };

  const toggleExpanded = () => {
    setIsExpanded(!isExpanded);
  };

  // –ù–∞–π–¥–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
  const parentTask = task.parentId ? parentTasks.find(p => p.id === task.parentId) : null;

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å userId (—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)
  const employeesWithUserId = employees.filter(emp => emp.userId);

  return (
    <WindowsWindow
      title="–°–≤–æ–π—Å—Ç–≤–∞ –∑–∞–¥–∞—á–∏"
      icon="‚öôÔ∏è"
      isExpanded={isExpanded}
      onToggleExpanded={toggleExpanded}
      defaultSize={{ width: 900, height: 600 }}
      minSize={{ width: 600, height: 400 }}
    >
      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', height: '100%', marginTop: 16 }}>
        <input type="hidden" name="id" value={task.id} />
        
        {/* –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ */}
        <div style={{ flexShrink: 0 }}>
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∫–æ–º–ø–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –∑–∞–¥–∞—á) */}
          <div style={{ display: 'grid', gridTemplateColumns: (isExpanded && !task.parentId) ? '2fr 1fr' : '1fr', gap: 16, marginBottom: 8 }}>
            <div>
              <label style={{ display: 'block', marginBottom: 5, fontWeight: 600, fontSize: 14 }}>
                –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ *
              </label>
              <input 
                name="taskName" 
                required 
                defaultValue={task.taskName}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                style={{ 
                  width: '100%', 
                  padding: '10px 12px', 
                  border: '1px solid #ced4da', 
                  borderRadius: 4,
                  fontSize: 14
                }}
              />
            </div>

            {/* –ö–æ–º–ø–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –∑–∞–¥–∞—á –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ */}
            {!task.parentId && isExpanded && (
              <div>
                <label style={{ display: 'block', marginBottom: 5, fontWeight: 600, fontSize: 14 }}>
                  –ö–æ–º–ø–∞–Ω–∏—è
                </label>
                <select 
                  name="companyId" 
                  defaultValue={task.companyId || ''}
                  style={{ 
                    width: '100%', 
                    padding: '10px 12px', 
                    border: '1px solid #ced4da', 
                    borderRadius: 4,
                    fontSize: 14
                  }}
                >
                  <option value="">–õ–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞</option>
                  {userCompanies.map((company) => (
                    <option key={company.id} value={company.id}>
                      {company.companyName}
                      {company.isOwner && ' üëë'}
                    </option>
                  ))}
                </select>
                <div style={{ fontSize: 12, color: '#6c757d', marginTop: 4 }}>
                  {task.companyId ? 
                    'üè¢ –ó–∞–¥–∞—á–∞ - –≤–∏–¥–Ω–∞ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏' : 
                    'üë§ –õ–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞ - –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–∞–º'
                  }
                </div>
              </div>
            )}
          </div>

          {/* –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á, –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π */}
          {parentTask && (
            <div style={{ marginBottom: 8 }}>
              <label style={{ display: 'block', marginBottom: 5, fontWeight: 600, fontSize: 14 }}>
                –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞
              </label>
              <Link 
                href={`/tasks/edit/${task.parentId}`}
                style={{
                  display: 'block',
                  width: '100%',
                  padding: '10px 12px',
                  backgroundColor: '#e3f2fd',
                  border: '1px solid #bbdefb',
                  borderRadius: 4,
                  fontSize: 14,
                  color: '#1565c0',
                  textDecoration: 'none',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease'
                }}
                title="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–µ"
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#bbdefb';
                  e.currentTarget.style.transform = 'translateY(-1px)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = '#e3f2fd';
                  e.currentTarget.style.transform = 'translateY(0)';
                }}
              >
                üîó {'‚Äî'.repeat(parentTask.level)} {parentTask.taskName}
              </Link>
            </div>
          )}

          {/* –¶–µ–ª—å –∑–∞–¥–∞—á–∏ - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–æ */}
          <div style={{ marginBottom: 8 }}>
            <label style={{ display: 'block', marginBottom: 5, fontWeight: 600, fontSize: 14 }}>
              –¶–µ–ª—å –∑–∞–¥–∞—á–∏
            </label>
            <textarea 
              name="description" 
              defaultValue={task.description || ''}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
              style={{ 
                width: '100%', 
                padding: '10px 12px', 
                border: '1px solid #ced4da', 
                borderRadius: 4, 
                minHeight: isExpanded ? 80 : 40,
                fontSize: 14,
                resize: 'vertical'
              }}
            />
          </div>
        </div>

        {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –ø–æ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
        {isExpanded && (
          <div style={{ flex: 1, overflow: 'auto', paddingRight: 8 }}>
            {/* –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –°–æ–∑–¥–∞—Ç–µ–ª—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16, marginBottom: 16 }}>
              <div>
                <label style={{ display: 'block', marginBottom: 5, fontWeight: 600, fontSize: 14 }}>
                  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                </label>
                <select 
                  name="executorId" 
                  defaultValue={task.executorId || ''}
                  style={{ 
                    width: '100%', 
                    padding: '10px 12px', 
                    border: '1px solid #ced4da', 
                    borderRadius: 4,
                    fontSize: 14
                  }}
                >
                  <option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</option>
                  {employees.map((employee: Employee) => (
                    <option key={employee.id} value={employee.id}>
                      {employee.displayName || employee.Name}
                      {employee.userId && employee.userId === currentUserId && ' üë§ (—ç—Ç–æ –≤—ã)'}
                    </option>
                  ))}
                </select>
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ */}
                {task.executorId && (
                  <div style={{ fontSize: 12, color: '#6c757d', marginTop: 4 }}>
                    {(() => {
                      const executor = employees.find((emp: Employee) => emp.id === task.executorId);
                      if (executor?.userId === currentUserId) {
                        return '‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —ç—Ç–æ–π –∑–∞–¥–∞—á–∏';
                      }
                      if (executor?.userId) {
                        return `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${executor.userNicName || executor.userFullName}`;
                      }
                      return 'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (–±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ)';
                    })()}
                  </div>
                )}
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: 5, fontWeight: 600, fontSize: 14 }}>
                  –°–æ–∑–¥–∞—Ç–µ–ª—å
                </label>
                <div style={{ 
                  width: '100%', 
                  padding: '10px 12px', 
                  border: '1px solid #e9ecef', 
                  borderRadius: 4,
                  fontSize: 14,
                  backgroundColor: '#f8f9fa',
                  color: '#495057',
                  minHeight: '20px',
                  display: 'flex',
                  alignItems: 'center'
                }}>
                  {(() => {
                    if (!task.userId) {
                      return '–ù–µ —É–∫–∞–∑–∞–Ω';
                    }
                    const creator = employees.find((emp: Employee) => emp.userId === task.userId);
                    const creatorName = creator ? (creator.displayName || creator.Name) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                    const isCurrentUser = task.userId === currentUserId;
                    
                    return (
                      <span>
                        üë§ {creatorName}
                        {isCurrentUser && ' (—ç—Ç–æ –≤—ã)'}
                      </span>
                    );
                  })()}
                </div>
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ */}
                {task.userId && (
                  <div style={{ fontSize: 12, color: '#6c757d', marginTop: 4 }}>
                    {task.userId === currentUserId 
                      ? '‚úÖ –í—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É' 
                      : 'ÔøΩ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥—É—Ç —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'
                    }
                  </div>
                )}
              </div>
            </div>

            {/* –°—Ç–∞—Ç—É—Å, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã, –¥–µ–¥–ª–∞–π–Ω –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É */}
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', gap: 12, marginBottom: 16 }}>
              <div>
                <label style={{ display: 'block', marginBottom: 4, fontWeight: 600, fontSize: 13 }}>
                  –°—Ç–∞—Ç—É—Å *
                </label>
                <select 
                  name="statusId" 
                  required 
                  defaultValue={task.statusId}
                  style={{ 
                    width: '100%', 
                    padding: '7px 8px', 
                    border: '1px solid #ced4da', 
                    borderRadius: 4,
                    fontSize: 12
                  }}
                >
                  <option value="">–°—Ç–∞—Ç—É—Å</option>
                  {statuses.map((status) => (
                    <option key={status.id} value={status.id}>
                      {status.status}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: 4, fontWeight: 600, fontSize: 13 }}>
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                </label>
                <select 
                  name="priorityId" 
                  defaultValue={task.priorityId || ''}
                  style={{ 
                    width: '100%', 
                    padding: '7px 8px', 
                    border: '1px solid #ced4da', 
                    borderRadius: 4,
                    fontSize: 12
                  }}
                >
                  <option value="">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
                  {priorities.map((priority) => (
                    <option key={priority.id} value={priority.id}>
                      {priority.priority}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: 4, fontWeight: 600, fontSize: 13 }}>
                  –ù–∞—á–∞–ª–æ
                </label>
                <input 
                  name="startDate" 
                  type="date"
                  defaultValue={task.startDate ? formatDateForInput(task.startDate) : ''}
                  style={{ 
                    width: '100%', 
                    padding: '7px 8px', 
                    border: '1px solid #ced4da', 
                    borderRadius: 4,
                    fontSize: 12
                  }}
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: 4, fontWeight: 600, fontSize: 13 }}>
                  –î–µ–¥–ª–∞–π–Ω
                </label>
                <input 
                  name="dedline" 
                  type="date"
                  defaultValue={task.dedline ? formatDateForInput(task.dedline) : ''}
                  style={{ 
                    width: '100%', 
                    padding: '7px 8px', 
                    border: '1px solid #ced4da', 
                    borderRadius: 4,
                    fontSize: 12
                  }}
                />
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ - —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center', 
              marginTop: 20,
              paddingTop: 16,
              borderTop: '1px solid #e9ecef'
            }}>
              <button 
                type="submit" 
                style={{ 
                  padding: '12px 24px', 
                  backgroundColor: '#007bff',
                  color: 'white', 
                  border: 'none', 
                  borderRadius: 4, 
                  cursor: 'pointer',
                  fontSize: 14,
                  fontWeight: 500
                }}
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>

              <button
                type="button"
                onClick={() => onDelete(task.id, task.taskName)}
                style={{
                  padding: '8px 16px',
                  backgroundColor: '#dc3545',
                  color: 'white',
                  border: 'none',
                  borderRadius: 4,
                  cursor: 'pointer',
                  fontSize: 12
                }}
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        )}
      </form>
    </WindowsWindow>
  );
}
