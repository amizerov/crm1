'use server';

import { getCurrentUser } from '@/app/(auth)/actions/login';
import { query } from '@/db/connect';
import { logTaskHistory } from './taskHistory';

export async function updateTaskOrder(taskId: number, newStatusId: number, newOrder: number) {
  try {
    console.log('üîß updateTaskOrder START:', { taskId, newStatusId, newOrder });
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const currentUser = await getCurrentUser();
    if (!currentUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    const currentTaskResult = await query(
      'SELECT statusId, orderInStatus FROM Task WHERE id = @taskId',
      { taskId }
    );

    if (!currentTaskResult || currentTaskResult.length === 0) {
      throw new Error('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const oldStatusId = currentTaskResult[0].statusId;
    const oldOrder = currentTaskResult[0].orderInStatus || 0;
    
    console.log('üìä Current task state:', { oldStatusId, oldOrder, newStatusId, newOrder });

    // 2. –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏)
    if (oldStatusId !== newStatusId) {
      console.log('üîÑ Moving between columns');
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
      const oldStatusResult = await query('SELECT status FROM StatusTask WHERE id = @id', { id: oldStatusId });
      const newStatusResult = await query('SELECT status FROM StatusTask WHERE id = @id', { id: newStatusId });
      const oldStatusName = oldStatusResult[0]?.status || `–°—Ç–∞—Ç—É—Å ${oldStatusId}`;
      const newStatusName = newStatusResult[0]?.status || `–°—Ç–∞—Ç—É—Å ${newStatusId}`;
      
      // 2.1. –°–¥–≤–∏–≥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ (–æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ)
      console.log('üìç Shifting tasks in NEW column down from position', newOrder);
      await query(`
        UPDATE Task 
        SET orderInStatus = orderInStatus + 1,
            dtu = GETDATE()
        WHERE statusId = @newStatusId 
        AND orderInStatus >= @newOrder
      `, { newStatusId, newOrder });

      // 2.2. –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É
      console.log('üíæ Moving task to new column');
      await query(`
        UPDATE Task 
        SET statusId = @newStatusId,
            orderInStatus = @newOrder,
            dtu = GETDATE()
        WHERE id = @taskId
      `, { taskId, newStatusId, newOrder });

      // 2.3. –í–ê–ñ–ù–û: –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–ø—É—Å–∫)
      console.log('üìù Renumbering old column:', oldStatusId);
      await query(`
        UPDATE Task 
        SET orderInStatus = orderInStatus - 1,
            dtu = GETDATE()
        WHERE statusId = @oldStatusId 
        AND orderInStatus > @oldOrder
      `, { oldStatusId, oldOrder });

      // 2.4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await logTaskHistory(taskId, {
        actionType: 'order_changed',
        fieldName: 'status_and_order',
        oldValue: oldStatusName,
        newValue: newStatusName,
        description: `–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª(–∞) –∑–∞–¥–∞—á—É –∏–∑ "${oldStatusName}" –≤ "${newStatusName}"`
      });

    } else {
      // 3. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
      console.log('‚ÜîÔ∏è Moving within same column');
      
      if (oldOrder === newOrder) {
        console.log('‚úÖ Same position, no changes needed');
        return { success: true };
      }

      if (oldOrder < newOrder) {
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤–Ω–∏–∑
        console.log('‚¨áÔ∏è Moving down');
        await query(`
          UPDATE Task 
          SET orderInStatus = orderInStatus - 1,
              dtu = GETDATE()
          WHERE statusId = @statusId 
          AND orderInStatus > @oldOrder 
          AND orderInStatus <= @newOrder
        `, { statusId: newStatusId, oldOrder, newOrder });
      } else {
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤–≤–µ—Ä—Ö
        console.log('‚¨ÜÔ∏è Moving up');
        await query(`
          UPDATE Task 
          SET orderInStatus = orderInStatus + 1,
              dtu = GETDATE()
          WHERE statusId = @statusId 
          AND orderInStatus >= @newOrder 
          AND orderInStatus < @oldOrder
        `, { statusId: newStatusId, oldOrder, newOrder });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º—É –∑–∞–¥–∞—á—É
      console.log('üíæ Updating task position');
      await query(`
        UPDATE Task 
        SET orderInStatus = @newOrder,
            dtu = GETDATE()
        WHERE id = @taskId
      `, { taskId, newOrder });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      const statusResult = await query('SELECT status FROM StatusTask WHERE id = @id', { id: newStatusId });
      const statusName = statusResult[0]?.status || `–°—Ç–∞—Ç—É—Å ${newStatusId}`;
      
      await logTaskHistory(taskId, {
        actionType: 'order_changed',
        fieldName: 'order_in_status',
        oldValue: `–ø–æ–∑–∏—Ü–∏—è ${oldOrder + 1}`,
        newValue: `–ø–æ–∑–∏—Ü–∏—è ${newOrder + 1}`,
        description: `–∏–∑–º–µ–Ω–∏–ª(–∞) –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á–∏ –≤ "${statusName}" —Å –ø–æ–∑–∏—Ü–∏–∏ ${oldOrder + 1} –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${newOrder + 1}`
      });
    }

    // 4. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å–∫–≤–æ–∑–Ω–∞—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    console.log('ÔøΩ Verifying numbering integrity');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã
    const statusesToCheck = oldStatusId !== newStatusId 
      ? [oldStatusId, newStatusId] 
      : [newStatusId];

    for (const statusId of statusesToCheck) {
      console.log(`  üìä Checking status ${statusId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ç—É—Å–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É orderInStatus
      const tasksInStatus = await query(`
        SELECT id, orderInStatus 
        FROM Task 
        WHERE statusId = @statusId 
        AND parentId IS NULL
        ORDER BY COALESCE(orderInStatus, 999999), id
      `, { statusId });

      // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –±—ã–ª–∞ —Å–∫–≤–æ–∑–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è 0, 1, 2, 3...
      for (let i = 0; i < tasksInStatus.length; i++) {
        const task = tasksInStatus[i];
        if (task.orderInStatus !== i) {
          await query(`
            UPDATE Task 
            SET orderInStatus = @newOrder 
            WHERE id = @taskId
          `, { taskId: task.id, newOrder: i });
          console.log(`  ‚úèÔ∏è Renumbered task ${task.id}: ${task.orderInStatus} -> ${i}`);
        }
      }
    }

    console.log('‚úÖ updateTaskOrder completed successfully');
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∑–∞–¥–∞—á–∏:', error);
    return { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á–∏' };
  }
}