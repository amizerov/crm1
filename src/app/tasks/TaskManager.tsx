'use client';

import { useState, useMemo, useEffect, useTransition } from 'react';
import Link from 'next/link';
import TaskTable from './TaskTable';
import TaskFilters from './TaskFilters';
import CompanySelector from '@/components/CompanySelector';
import { taskUtils, type Task, type FilterType } from './taskUtils';
import { getCompleted } from './actions/getCompleted';
import { getTasks } from './actions/getTasks';

interface UserCompany {
  id: number;
  companyName: string;
  isOwner: boolean;
}

interface TaskManagerProps {
  tasks: Task[];
  userId: number;
  executorId?: number;
  executorName?: string;
  userCompanies: UserCompany[];
}

export type SortConfig = {
  field: string;
  direction: 'asc' | 'desc';
} | null;

export default function TaskManager({ tasks: initialTasks, userId, executorId, executorName, userCompanies }: TaskManagerProps) {
  const [currentTasks, setCurrentTasks] = useState<Task[]>(initialTasks);
  const [selectedCompanyId, setSelectedCompanyId] = useState<number>(0);
  const [currentFilter, setCurrentFilter] = useState<FilterType>('all');
  const [sortConfig, setSortConfig] = useState<SortConfig>(null);
  const [isPending, startTransition] = useTransition();

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  useEffect(() => {
    const savedCompanyId = localStorage.getItem('selectedCompanyId');
    if (savedCompanyId) {
      const companyId = parseInt(savedCompanyId);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
      if (companyId === 0 || userCompanies.some(c => c.id === companyId)) {
        setSelectedCompanyId(companyId);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        if (companyId !== 0) {
          startTransition(async () => {
            const newTasks = await getTasks(undefined, companyId);
            setCurrentTasks(newTasks);
          });
        }
      }
    }
  }, [userCompanies]);

  const handleCompanyChange = (companyId: number) => {
    setSelectedCompanyId(companyId);
    
    startTransition(async () => {
      const newTasks = await getTasks(undefined, companyId === 0 ? undefined : companyId);
      setCurrentTasks(newTasks);
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
  const handleFilterChange = async (filter: FilterType) => {
    console.log('–ò–∑–º–µ–Ω—è–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä –Ω–∞:', filter);
    setCurrentFilter(filter);
    
    if (filter === 'completed') {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
      try {
        const completedTasks = await getCompleted(executorId);
        setCurrentTasks(completedTasks);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
      }
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –Ω–∞–±–æ—Ä—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
      console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–∞–¥–∞—á–∞–º:', initialTasks.length);
      setCurrentTasks(initialTasks);
    }
  };

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const tasksCount = useMemo(() => {
    console.log('–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–¥–∞—á:', currentTasks.length, currentTasks);
    return taskUtils.countTasksByCategories(currentTasks, userId);
  }, [currentTasks, userId]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
  const processedTasks = useMemo(() => {
    console.log('–§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏:', currentFilter, '–∏–∑', currentTasks.length);
    
    let filtered;
    
    // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä 'completed' –∏ –º—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö —Å–Ω–æ–≤–∞
    if (currentFilter === 'completed' && currentTasks !== initialTasks) {
      filtered = currentTasks; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –µ—Å—Ç—å
    } else {
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
      filtered = taskUtils.filterTasks(currentTasks, currentFilter, userId);
    }
    
    console.log('–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filtered.length, filtered);
    
    // –ó–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if (sortConfig) {
      filtered = filtered.sort((a, b) => {
        const aValue = a[sortConfig.field as keyof Task] || '';
        const bValue = b[sortConfig.field as keyof Task] || '';
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–∞—Ç
        if (sortConfig.field === 'dedline' || sortConfig.field === 'dtc' || sortConfig.field === 'dtu') {
          const aDate = aValue ? new Date(aValue as string).getTime() : 0;
          const bDate = bValue ? new Date(bValue as string).getTime() : 0;
          
          // –î–ª—è –¥–µ–¥–ª–∞–π–Ω–∞: –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞ –≤ –∫–æ–Ω–µ—Ü
          if (sortConfig.field === 'dedline') {
            if (!aValue && !bValue) return 0;
            if (!aValue) return sortConfig.direction === 'asc' ? 1 : -1;
            if (!bValue) return sortConfig.direction === 'asc' ? -1 : 1;
          }
          
          return sortConfig.direction === 'asc' ? aDate - bDate : bDate - aDate;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if (sortConfig.field === 'id' || sortConfig.field === 'priority') {
          const aNum = Number(aValue) || 0;
          const bNum = Number(bValue) || 0;
          return sortConfig.direction === 'asc' ? aNum - bNum : bNum - aNum;
        }
        
        // –°—Ç—Ä–æ–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        const aStr = String(aValue).toLowerCase();
        const bStr = String(bValue).toLowerCase();
        
        if (sortConfig.direction === 'asc') {
          return aStr.localeCompare(bStr);
        } else {
          return bStr.localeCompare(aStr);
        }
      });
    }
    
    return filtered;
  }, [currentTasks, currentFilter, sortConfig, userId]);

  const handleSort = (field: string) => {
    setSortConfig(prevSort => {
      if (prevSort?.field === field) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if (prevSort.direction === 'asc') {
          return { field, direction: 'desc' };
        } else {
          return null; // –°–±—Ä–æ—Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        }
      } else {
        // –ù–æ–≤–æ–µ –ø–æ–ª–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        return { field, direction: 'asc' };
      }
    });
  };

  return (
    <>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ */}
      <div className="flex justify-between items-center mb-8 flex-wrap gap-4">
        <div className="flex items-center gap-8 flex-wrap">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 m-0">–ó–∞–¥–∞—á–∏</h1>
          
          <CompanySelector 
            companies={userCompanies} 
            selectedCompanyId={selectedCompanyId}
            onCompanyChange={handleCompanyChange}
            storageKey="selectedCompanyId"
          />
          
          {isPending && (
            <span className="text-sm text-gray-600 dark:text-gray-400 italic">
              –ó–∞–≥—Ä—É–∑–∫–∞...
            </span>
          )}
          
          <div className="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded-md border border-gray-200 dark:border-gray-700">
            <span className="text-sm font-bold text-gray-600 dark:text-gray-400">
              –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {currentTasks.length}
            </span>
          </div>
        </div>
        
        <div className="flex items-center gap-4">
          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π */}
          <Link 
            href="/tasks/views/desk"
            className="
              px-4 py-2
              bg-blue-600 hover:bg-blue-700 
              dark:bg-blue-500 dark:hover:bg-blue-600
              text-white
              rounded
              text-sm font-medium
              no-underline inline-block
              transition-colors
            "
          >
            üìã –î–æ—Å–∫–∞
          </Link>
          
          <Link 
            href="/tasks/add"
            className="
              px-6 py-3
              bg-green-600 hover:bg-green-700 
              dark:bg-green-500 dark:hover:bg-green-600
              text-white
              rounded
              text-base font-medium
              no-underline inline-block
              transition-all duration-200
              hover:shadow-lg dark:hover:shadow-green-500/20
              hover:-translate-y-0.5
            "
          >
            + –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
          </Link>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <TaskFilters
        onFilterChange={handleFilterChange}
        currentFilter={currentFilter}
        tasksCount={tasksCount}
      />

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ */}
      {sortConfig && (
        <div style={{ 
          display: 'flex', 
          justifyContent: 'flex-end', 
          alignItems: 'center', 
          marginBottom: 8,
          fontSize: 12, 
          color: '#6c757d' 
        }}>
          <span>
            –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: <strong>{getFieldDisplayName(sortConfig.field)}</strong>
          </span>
          <span style={{ fontSize: 14, marginLeft: 8 }}>
            {sortConfig.direction === 'asc' ? '‚Üë' : '‚Üì'}
          </span>
        </div>
      )}

      {/* –û–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isPending && (
        <div className="relative">
          <div className="absolute inset-0 bg-white/70 dark:bg-gray-900/70 z-10 flex items-center justify-center min-h-[200px]">
            <span className="text-gray-600 dark:text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</span>
          </div>
        </div>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á */}
      <TaskTable 
        tasks={processedTasks} 
        userId={userId}
        onSort={handleSort}
        sortConfig={sortConfig}
      />
    </>
  );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function getFilterDescription(filter: FilterType): string {
  switch (filter) {
    case 'important':
      return '–í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏';
    case 'forgotten':
      return '–ó–∞–±—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏';
    case 'overdue':
      return '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏';
    case 'completed':
      return '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏';
    case 'my':
      return '–ú–æ–∏ –∑–∞–¥–∞—á–∏';
    case 'unassigned':
      return '–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è';
    default:
      return '–í—Å–µ –∑–∞–¥–∞—á–∏';
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
function getFieldDisplayName(field: string): string {
  switch (field) {
    case 'id': return 'ID';
    case 'name': return '–ù–∞–∑–≤–∞–Ω–∏–µ';
    case 'dtc': return '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è';
    case 'dtu': return '–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    case 'dedline': return '–î–µ–¥–ª–∞–π–Ω';
    case 'priority': return '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç';
    case 'status': return '–°—Ç–∞—Ç—É—Å';
    case 'executorName': return '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
    default: return field;
  }
}
