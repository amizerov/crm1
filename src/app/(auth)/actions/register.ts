'use server';

import { query } from '@/db/connect';
import { hashPassword } from './login';
import { sendVerificationEmail } from '@/lib/email';
import crypto from 'crypto';

export async function registerUser(email: string, password: string, fullName: string) {
  try {
    console.log('üìù Registration started for:', email);

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await query(
      'SELECT id, isVerified FROM [User] WHERE login = @email',
      { email }
    );

    if (existingUser && existingUser.length > 0) {
      if (existingUser[0].isVerified) {
        return { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' };
      } else {
        return { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.' };
      }
    }

    // 2. –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await hashPassword(password);
    console.log('üîí Password hashed');

    // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º nicName –∏–∑ fullName (–ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Å–ª–æ–≤ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è)
    const nicName = fullName.trim().split(' ').map(word => word[0]).join('').toUpperCase() || fullName.substring(0, 10);
    console.log('üìõ Generated nicName:', nicName);

    // 4. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π)
    const result = await query(
      `INSERT INTO [User] (login, password, fullName, nicName, email, isVerified, dtc) 
       OUTPUT INSERTED.id
       VALUES (@email, @password, @fullName, @nicName, @email, 0, GETDATE())`,
      { email, password: hashedPassword, fullName, nicName }
    );

    const userId = result[0].id;
    console.log('üë§ User created with ID:', userId, 'email:', email, 'isVerified: 0');

    // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π)
    const token = crypto.randomBytes(32).toString('hex');
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

    console.log('üîë Creating token:', { 
      userId, 
      tokenPreview: token.substring(0, 10) + '...', 
      expiresAt: expiresAt.toISOString() 
    });

    const insertResult = await query(
      `INSERT INTO VerificationToken (userId, token, expiresAt, createdAt)
       VALUES (@userId, @token, @expiresAt, GETDATE())`,
      { userId, token, expiresAt: expiresAt.toISOString() }
    );
    console.log('‚úÖ Verification token created, result:', insertResult);

    // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    const emailResult = await sendVerificationEmail(email, token);

    if (emailResult.error) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      console.error('‚ö†Ô∏è User created but email failed');
      return { 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' 
      };
    }

    console.log('‚úÖ Registration completed successfully');
    return { 
      success: true, 
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.' 
    };

  } catch (error) {
    console.error('‚ùå Registration error:', error);
    return { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' };
  }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º email –∏ —Å—Ä–∞–∑—É —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å –∫–æ–º–ø–∞–Ω–∏–µ–π
 */
export async function registerWithInvitation(token: string, password: string, fullName: string) {
  try {
    console.log('üìù Registration with invitation started, token:', token.substring(0, 10) + '...');

    // 1. –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const { getInvitationByToken } = await import('@/app/employees/actions/invitations');
    const invitationResult = await getInvitationByToken(token);

    if (invitationResult.error) {
      return { error: invitationResult.error };
    }

    const invitation = invitationResult.invitation!;
    const email = invitation.email;

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await query(
      'SELECT id, isVerified FROM [User] WHERE login = @email',
      { email }
    );

    if (existingUser && existingUser.length > 0) {
      return { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.' };
    }

    // 3. –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await hashPassword(password);
    console.log('üîí Password hashed');

    // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º nicName –∏–∑ fullName
    const nicName = fullName.trim().split(' ').map(word => word[0]).join('').toUpperCase() || fullName.substring(0, 10);
    console.log('üìõ Generated nicName:', nicName);

    // 5. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–£–ñ–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ)
    const userResult = await query(
      `INSERT INTO [User] (login, password, fullName, nicName, email, isVerified, dtc) 
       OUTPUT INSERTED.id
       VALUES (@email, @password, @fullName, @nicName, @email, 1, GETDATE())`,
      { email, password: hashedPassword, fullName, nicName }
    );

    const userId = userResult[0].id;
    console.log('üë§ User created with ID:', userId, 'email:', email, 'isVerified: 1 (via invitation)');

    // 6. –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const employeeName = nicName || fullName || email;
    await query(
      `INSERT INTO Employee (userId, Name, companyId, dtc)
       VALUES (@userId, @name, @companyId, GETDATE())`,
      { 
        userId, 
        name: employeeName, 
        companyId: invitation.companyId 
      }
    );
    console.log('üë• Employee created for user:', userId, 'in company:', invitation.companyId);

    // 7. –ï—Å–ª–∏ —Ä–æ–ª—å Partner - –¥–æ–±–∞–≤–ª—è–µ–º –≤ User_Company
    if (invitation.role === 'Partner') {
      await query(
        `INSERT INTO User_Company (userId, companyId)
         VALUES (@userId, @companyId)`,
        { userId, companyId: invitation.companyId }
      );
      console.log('ü§ù Partner relationship created in User_Company');
    }

    // 8. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    await query(
      `UPDATE Invitation 
       SET status = 'accepted', acceptedAt = GETDATE(), acceptedByUserId = @userId, dtu = GETDATE()
       WHERE id = @invitationId`,
      { userId, invitationId: invitation.id }
    );
    console.log('‚úÖ Invitation marked as accepted');

    // 9. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie)
    const { cookies } = await import('next/headers');
    (await cookies()).set('userId', userId.toString(), {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 30 * 24 * 60 * 60 // 30 –¥–Ω–µ–π
    });
    console.log('üç™ Session cookie set for user:', userId);

    return { 
      success: true, 
      message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${invitation.companyName}! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫–∞–∫ ${invitation.role === 'Partner' ? '–ø–∞—Ä—Ç–Ω—ë—Ä' : '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫'}.` 
    };

  } catch (error) {
    console.error('‚ùå Registration with invitation error:', error);
    return { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' };
  }
}
