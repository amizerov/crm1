'use client';

import { useState, useTransition, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import FormContainer from '@/components/FormContainer';
import FormFieldStandard from '@/components/FormFieldStandard';
import { StandardInput, StandardSelect } from '@/components/StandardInputs';
import ButtonSave from '@/components/ButtonSave';
import ButtonCancel from '@/components/ButtonCancel';
import Notification from '@/components/Notification';
import { addEmployee } from '../actions/actions';
import { createInvitation, InvitationRole } from '../actions/invitations';

interface User {
  id: number;
  login: string;
  nicName: string;
  fullName: string;
  email: string;
  displayName: string;
}

interface Company {
  id: number;
  companyName: string;
}

interface Props {
  relatedUsers: User[];
  companies: Company[];
}

export default function AddEmployeeForm({ relatedUsers, companies }: Props) {
  const [mode, setMode] = useState<'link' | 'invite'>('link');
  const [isPending, startTransition] = useTransition();
  const [selectedCompanyId, setSelectedCompanyId] = useState<number>(0);
  const [notification, setNotification] = useState<{ type: 'success' | 'error'; message: string; isVisible: boolean }>({
    type: 'success',
    message: '',
    isVisible: false
  });
  const router = useRouter();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const savedCompanyId = localStorage.getItem('selectedCompanyId');
    if (savedCompanyId) {
      const companyId = parseInt(savedCompanyId, 10);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
      if (companyId === 0 || companies.some(c => c.id === companyId)) {
        setSelectedCompanyId(companyId);
      }
    }
  }, [companies]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
  const handleCompanyChange = (companyId: number) => {
    setSelectedCompanyId(companyId);
    localStorage.setItem('selectedCompanyId', companyId.toString());
  };

  const handleSubmit = async (formData: FormData) => {
    setNotification({ type: 'success', message: '', isVisible: false });

    try {
      if (mode === 'link') {
        // –°–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –î–æ–±–∞–≤–ª—è–µ–º selectedCompanyId –≤ FormData –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if (selectedCompanyId) {
          formData.set('companyId', selectedCompanyId.toString());
        }
        
        startTransition(() => {
          addEmployee(formData);
        });
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const email = formData.get('email') as string;
        const companyId = selectedCompanyId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º selectedCompanyId –≤–º–µ—Å—Ç–æ formData
        const role = formData.get('role') as InvitationRole;

        if (!email || !companyId || !role) {
          setNotification({
            type: 'error',
            message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
            isVisible: true
          });
          return;
        }

        startTransition(async () => {
          const result = await createInvitation({ email, companyId, role });

          if (result.error) {
            setNotification({
              type: 'error',
              message: result.error,
              isVisible: true
            });
          } else {
            setNotification({
              type: 'success',
              message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ' + email,
              isVisible: true
            });
            setTimeout(() => router.push('/employees'), 2000);
          }
        });
      }
    } catch (err) {
      setNotification({
        type: 'error',
        message: err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        isVisible: true
      });
    }
  };

  const closeNotification = () => {
    setNotification(prev => ({ ...prev, isVisible: false }));
  };

  return (
    <>
      <Notification
        message={notification.message}
        type={notification.type}
        isVisible={notification.isVisible}
        onClose={closeNotification}
      />

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
      <div className="mb-6 flex gap-4 p-1 bg-gray-100 dark:bg-gray-800 rounded-lg">
        <button
          type="button"
          onClick={() => setMode('link')}
          className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
            mode === 'link'
              ? 'bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 shadow'
              : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 cursor-pointer'
          }`}
        >
          üîó –°–≤—è–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        </button>
        <button
          type="button"
          onClick={() => setMode('invite')}
          className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
            mode === 'invite'
              ? 'bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 shadow'
              : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 cursor-pointer'
          }`}
        >
          ‚úâÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–æ–≤–æ–≥–æ
        </button>
      </div>

      <FormContainer action={handleSubmit}>
        {mode === 'link' ? (
          /* –†–µ–∂–∏–º: –°–≤—è–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <FormFieldStandard label="–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" required>
              <StandardInput
                name="Name"
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
                required
              />
            </FormFieldStandard>

            <FormFieldStandard label="–°–≤—è–∑–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º">
              <StandardSelect name="userId">
                <option value="">–ù–µ —Å–≤—è–∑—ã–≤–∞—Ç—å</option>
                {relatedUsers.length > 0 ? (
                  relatedUsers.map(user => (
                    <option key={user.id} value={user.id}>
                      {user.displayName} ({user.email || user.fullName || user.login})
                    </option>
                  ))
                ) : (
                  <option disabled>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</option>
                )}
              </StandardSelect>
              <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–≥–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –≤–∞—à–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π
              </p>
            </FormFieldStandard>

            <FormFieldStandard label="–ö–æ–º–ø–∞–Ω–∏—è" required>
              <StandardSelect 
                name="companyId" 
                value={selectedCompanyId || ''} 
                onChange={(e) => handleCompanyChange(Number(e.target.value))}
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é</option>
                {companies.map(company => (
                  <option key={company.id} value={company.id}>
                    {company.companyName}
                  </option>
                ))}
              </StandardSelect>
            </FormFieldStandard>
          </div>
        ) : (
          /* –†–µ–∂–∏–º: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ email */
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <FormFieldStandard label="Email –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è" required>
              <StandardInput
                name="email"
                type="email"
                placeholder="email@example.com"
                required
              />
              <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                –ù–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
              </p>
            </FormFieldStandard>

            <FormFieldStandard label="–†–æ–ª—å" required>
              <StandardSelect name="role" required>
                <option value="Employee">üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫</option>
                <option value="Partner">üëî –ü–∞—Ä—Ç–Ω—ë—Ä</option>
              </StandardSelect>
              <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                –ü–∞—Ä—Ç–Ω—ë—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö
              </p>
            </FormFieldStandard>

            <FormFieldStandard label="–ö–æ–º–ø–∞–Ω–∏—è" required>
              <StandardSelect 
                name="companyId" 
                value={selectedCompanyId || ''} 
                onChange={(e) => handleCompanyChange(Number(e.target.value))}
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é</option>
                {companies.map(company => (
                  <option key={company.id} value={company.id}>
                    {company.companyName}
                  </option>
                ))}
              </StandardSelect>
            </FormFieldStandard>
          </div>
        )}

        <div className="pt-6 flex justify-end gap-3">
          <ButtonCancel href="/employees" />
          <ButtonSave disabled={isPending}>
            {isPending 
              ? (mode === 'link' ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–û—Ç–ø—Ä–∞–≤–∫–∞...') 
              : (mode === 'link' ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ')
            }
          </ButtonSave>
        </div>
      </FormContainer>
    </>
  );
}
