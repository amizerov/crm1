'use server';

import { query } from '@/db/connect';
import { getCurrentUser } from '@/app/(auth)/actions/login';
import { sendEmail } from '@/lib/email';
import crypto from 'crypto';

/**
 * –†–æ–ª—å –ø—Ä–∏–≥–ª–∞—à–∞–µ–º–æ–≥–æ:
 * - Employee: —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Employee (–¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞—á–∞–º)
 * - Partner: —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–ø–∏—Å—å –≤ Employee + User_Company (–ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–µ–π)
 */
export type InvitationRole = 'Employee' | 'Partner';

interface CreateInvitationParams {
  email: string;
  companyId: number;
  role: InvitationRole;
}

/**
 * –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
 * –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –∫–æ–º–ø–∞–Ω–∏–∏ (—Ç–µ, —É –∫–æ–≥–æ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ User_Company) –º–æ–≥—É—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö
 */
export async function createInvitation({ email, companyId, role }: CreateInvitationParams) {
  try {
    const currentUser = await getCurrentUser();
    if (!currentUser) {
      return { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏)
    // –ü–∞—Ä—Ç–Ω—ë—Ä = –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ User_Company
    const userCompanyCheck = await query(`
      SELECT 1 FROM User_Company 
      WHERE userId = @userId AND companyId = @companyId
    `, { userId: currentUser.id, companyId });

    if (userCompanyCheck.length === 0) {
      return { error: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç email
    const existingInvitation = await query(`
      SELECT id, status FROM Invitation
      WHERE email = @email AND companyId = @companyId AND status = 'pending'
    `, { email, companyId });

    if (existingInvitation.length > 0) {
      return { error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ email —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
    const existingEmployee = await query(`
      SELECT e.id 
      FROM Employee e
      JOIN [Users] u ON e.userId = u.id
      WHERE u.email = @email AND e.companyId = @companyId
    `, { email, companyId });

    if (existingEmployee.length > 0) {
      return { error: '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–∏' };
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    const companyInfo = await query(`
      SELECT companyName FROM Company WHERE id = @companyId
    `, { companyId });

    if (companyInfo.length === 0) {
      return { error: '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    const token = crypto.randomBytes(32).toString('hex');
    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 –¥–Ω–µ–π

    // –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    await query(`
      INSERT INTO Invitation (email, companyId, invitedByUserId, role, token, expiresAt)
      VALUES (@email, @companyId, @invitedByUserId, @role, @token, @expiresAt)
    `, { 
      email, 
      companyId, 
      invitedByUserId: currentUser.id, 
      role, 
      token, 
      expiresAt 
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    const invitationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/employees/acceptinvitation?token=${token}`;
    const companyName = companyInfo[0].companyName;
    const inviterName = currentUser.nicName || currentUser.login;

    const roleText = role === 'Partner' ? '–ø–∞—Ä—Ç–Ω—ë—Ä–æ–º' : '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º';
    const roleDescription = role === 'Partner' 
      ? '–í—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.'
      : '–í—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏.';

    const subject = `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—å ${roleText} –≤ ${companyName}`;
    
    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <style>
            body { 
              font-family: Arial, sans-serif; 
              line-height: 1.6; 
              color: #333; 
              margin: 0;
              padding: 0;
            }
            .container { 
              max-width: 600px; 
              margin: 0 auto; 
              padding: 20px; 
            }
            .header { 
              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
              color: white; 
              padding: 30px; 
              text-align: center; 
              border-radius: 10px 10px 0 0; 
            }
            .header h1 {
              margin: 0;
              font-size: 28px;
            }
            .content { 
              background: #f9f9f9; 
              padding: 30px; 
              border-radius: 0 0 10px 10px; 
            }
            .button { 
              display: inline-block; 
              padding: 15px 30px; 
              background: #667eea; 
              color: white !important; 
              text-decoration: none; 
              border-radius: 5px; 
              margin: 20px 0;
              font-weight: bold;
            }
            .button:hover {
              background: #5568d3;
            }
            .info-box {
              background: #e8eaf6;
              border-left: 4px solid #667eea;
              padding: 15px;
              margin: 15px 0;
            }
            .link-box {
              word-break: break-all; 
              background: #fff; 
              padding: 10px; 
              border-left: 4px solid #667eea;
              margin: 15px 0;
            }
            .footer { 
              text-align: center; 
              margin-top: 20px; 
              color: #666; 
              font-size: 12px; 
            }
            .warning {
              background: #fff3cd;
              border-left: 4px solid #ffc107;
              padding: 10px;
              margin: 15px 0;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É</h1>
            </div>
            <div class="content">
              <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
              <p><strong>${inviterName}</strong> –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å —Å—Ç–∞—Ç—å <strong>${roleText}</strong> –∫–æ–º–ø–∞–Ω–∏–∏ <strong>${companyName}</strong> –≤ —Å–∏—Å—Ç–µ–º–µ Argo CRM.</p>
              
              <div class="info-box">
                <strong>–†–æ–ª—å: ${role === 'Partner' ? 'üëî –ü–∞—Ä—Ç–Ω—ë—Ä' : 'üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫'}</strong><br>
                ${roleDescription}
              </div>
              
              <p style="text-align: center;">
                <a href="${invitationUrl}" class="button">–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</a>
              </p>
              
              <p>–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
              <div class="link-box">
                ${invitationUrl}
              </div>
              
              <div class="warning">
                <strong>‚è∞ –í–∞–∂–Ω–æ:</strong> –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 7 –¥–Ω–µ–π.
              </div>
              
              <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Argo CRM, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.</p>
              
              <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –æ–∂–∏–¥–∞–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
              
              <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ Argo CRM</p>
            </div>
            <div class="footer">
              <p>¬© 2025 Argo CRM. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            </div>
          </div>
        </body>
      </html>
    `;

    const text = `
–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É

${inviterName} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å —Å—Ç–∞—Ç—å ${roleText} –∫–æ–º–ø–∞–Ω–∏–∏ ${companyName} –≤ —Å–∏—Å—Ç–µ–º–µ Argo CRM.

–†–æ–ª—å: ${role}
${roleDescription}

–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
${invitationUrl}

–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 7 –¥–Ω–µ–π.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Argo CRM, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.

–ï—Å–ª–∏ –≤—ã –Ω–µ –æ–∂–∏–¥–∞–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Argo CRM
    `.trim();

    const emailResult = await sendEmail(email, subject, html, text);

    if (emailResult.error) {
      return { error: emailResult.error };
    }

    return { success: true, message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
  } catch (error) {
    console.error('Error creating invitation:', error);
    return { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' };
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É
 */
export async function getInvitationByToken(token: string) {
  try {
    const invitation = await query(`
      SELECT 
        i.id,
        i.email,
        i.companyId,
        i.role,
        i.status,
        i.expiresAt,
        c.companyName,
        u.nicName as inviterName
      FROM Invitation i
      JOIN Company c ON i.companyId = c.id
      JOIN [Users] u ON i.invitedByUserId = u.id
      WHERE i.token = @token
    `, { token });

    if (invitation.length === 0) {
      return { error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' };
    }

    const inv = invitation[0];

    if (inv.status !== 'pending') {
      return { error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ' };
    }

    if (new Date(inv.expiresAt) < new Date()) {
      await query(`UPDATE Invitation SET status = 'expired' WHERE id = @id`, { id: inv.id });
      return { error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç—ë–∫' };
    }

    return { invitation: inv };
  } catch (error) {
    console.error('Error getting invitation:', error);
    return { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' };
  }
}

/**
 * –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
 * –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å–∏ Employee –∏ User_Company (–µ—Å–ª–∏ —Ä–æ–ª—å Partner)
 */
export async function acceptInvitation(token: string) {
  try {
    const currentUser = await getCurrentUser();
    if (!currentUser) {
      return { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' };
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const invitationResult = await getInvitationByToken(token);
    if (invitationResult.error) {
      return { error: invitationResult.error };
    }

    const invitation = invitationResult.invitation!;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º email
    if (currentUser.email !== invitation.email) {
      return { error: '–≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ email' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
    const existingEmployee = await query(`
      SELECT id FROM Employee
      WHERE userId = @userId AND companyId = @companyId
    `, { userId: currentUser.id, companyId: invitation.companyId });

    if (existingEmployee.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–µ
      await query(`
        UPDATE Invitation 
        SET status = 'accepted', acceptedAt = GETDATE(), acceptedByUserId = @userId
        WHERE id = @invitationId
      `, { userId: currentUser.id, invitationId: invitation.id });

      return { error: '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏' };
    }

    // –°–æ–∑–¥–∞—ë–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const employeeName = currentUser.nicName || currentUser.fullName || currentUser.login;
    await query(`
      INSERT INTO Employee (userId, Name, companyId, dtc)
      VALUES (@userId, @name, @companyId, GETDATE())
    `, { 
      userId: currentUser.id, 
      name: employeeName, 
      companyId: invitation.companyId 
    });

    // –ï—Å–ª–∏ —Ä–æ–ª—å Partner - –¥–æ–±–∞–≤–ª—è–µ–º –≤ User_Company
    if (invitation.role === 'Partner') {
      const existingPartner = await query(`
        SELECT 1 FROM User_Company
        WHERE userId = @userId AND companyId = @companyId
      `, { userId: currentUser.id, companyId: invitation.companyId });

      if (existingPartner.length === 0) {
        await query(`
          INSERT INTO User_Company (userId, companyId)
          VALUES (@userId, @companyId)
        `, { userId: currentUser.id, companyId: invitation.companyId });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    await query(`
      UPDATE Invitation 
      SET status = 'accepted', acceptedAt = GETDATE(), acceptedByUserId = @userId, dtu = GETDATE()
      WHERE id = @invitationId
    `, { userId: currentUser.id, invitationId: invitation.id });

    return { 
      success: true, 
      message: `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–ø–∞–Ω–∏–∏ ${invitation.companyName}`,
      role: invitation.role
    };
  } catch (error) {
    console.error('Error accepting invitation:', error);
    return { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' };
  }
}
