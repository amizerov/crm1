'use client';

import { useState, useTransition, useEffect } from 'react';
import { getProjectsByCompany, getUserCompanies } from './actions/actions';
import { getCurrentUser } from '@/app/(auth)/actions/login';
import { redirect } from 'next/navigation';
import ProjectsTable from './ProjectsTable';
import LoadingCEP from '@/components/LoadingCEP';
import ListPageLayout from '@/components/ListPageLayout';
import StatCard from '@/components/StatCard';

export default function ProjectsPage() {
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [projects, setProjects] = useState<any[]>([]);
  const [companies, setCompanies] = useState<any[]>([]);
  const [selectedCompanyId, setSelectedCompanyId] = useState<number>(0);
  const [isPending, startTransition] = useTransition();
  const [isInitialLoading, setIsInitialLoading] = useState<boolean>(true);

  useEffect(() => {
    const initPage = async () => {
      const user = await getCurrentUser();
      if (!user) {
        redirect('/login');
        return;
      }
      setCurrentUser(user);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
      const userCompanies = await getUserCompanies();
      setCompanies(userCompanies);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
      let targetCompanyId = user.companyId;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
      const savedCompanyId = localStorage.getItem('selectedCompanyId');
      if (savedCompanyId) {
        const companyId = parseInt(savedCompanyId, 10);
        if (companyId === 0 || userCompanies.some((c: any) => c.id === companyId)) {
          targetCompanyId = companyId;
        }
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setSelectedCompanyId(targetCompanyId);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
      const initialProjects = await getProjectsByCompany(targetCompanyId === 0 ? undefined : targetCompanyId);
      setProjects(initialProjects);
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      setIsInitialLoading(false);
    };

    initPage();
  }, []);

  const handleCompanyChange = async (companyId: number) => {
    setSelectedCompanyId(companyId);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage
    localStorage.setItem('selectedCompanyId', companyId.toString());
    
    startTransition(async () => {
      const newProjects = await getProjectsByCompany(companyId === 0 ? undefined : companyId);
      setProjects(newProjects);
    });
  };

  if (!currentUser || isInitialLoading) {
    return <LoadingCEP message="–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤..." />;
  }

  return (
    <ListPageLayout
      title="–ü—Ä–æ–µ–∫—Ç—ã"
      companies={companies}
      selectedCompanyId={selectedCompanyId}
      onCompanyChange={handleCompanyChange}
      isPending={isPending}
      addButtonText="+ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
      addButtonHref="/projects/add"
      footer={
        <>
          <StatCard label="–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤" value={projects.length} />
          <div className="px-3 py-1.5 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded">
            <span className="text-xs italic text-blue-700 dark:text-blue-300">
              üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </span>
          </div>
        </>
      }
    >
      <ProjectsTable 
        projects={projects}
        isPending={isPending}
      />
    </ListPageLayout>
  );
}
