'use server';

import { query } from './connect';
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import bcrypt from 'bcrypt';

export async function hashPassword(password: string): Promise<string> {
  const saltRounds = 10;
  return bcrypt.hash(password, saltRounds);
}

export async function loginUser(formData: FormData) {
  const login = formData.get('login') as string;
  const password = formData.get('password') as string;
  const returnTo = formData.get('returnTo') as string;

  if (!login || !password) {
    throw new Error('–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
  }

  try {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', login);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –≤–æ–æ–±—â–µ
    const allUsersResult = await query('SELECT COUNT(*) as count FROM [User]');
    console.log('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ:', allUsersResult[0].count);
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
    if (allUsersResult[0].count === 0) {
      console.log('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin...');
      await query(`
        INSERT INTO [User] (login, nicName, password)
        VALUES (@login, @nicName, @password)
      `, {
        login: 'admin',
        nicName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        password: 'admin'
      });
      console.log('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —Å–æ–∑–¥–∞–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º (–ø–æ–ª—É—á–∞–µ–º —Å—Ä–∞–∑—É –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è)
    const userExistsResult = await query(`
      SELECT id, login, nicName, password, isVerified 
      FROM [User] 
      WHERE login = @login
    `, { login });
    
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º', login, '–Ω–∞–π–¥–µ–Ω:', userExistsResult.length > 0);
    
    if (userExistsResult.length === 0) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }

    const foundUser = userExistsResult[0];
    const storedPassword = foundUser.password;
    const isVerified = foundUser.isVerified;
    
    console.log('üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      id: foundUser.id,
      login: foundUser.login,
      hashedPassword: storedPassword?.startsWith('$2b$') || storedPassword?.startsWith('$2a$'),
      isVerified: isVerified
    });

    let isPasswordValid = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å —Ö–µ—à–µ–º bcrypt (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å $2b$ –∏–ª–∏ $2a$)
    if (storedPassword && (storedPassword.startsWith('$2b$') || storedPassword.startsWith('$2a$'))) {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è');
      isPasswordValid = await bcrypt.compare(password, storedPassword);
    } else {
      // –°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–∞—Ä–æ–ª–µ–º –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
      console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ (—Å—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)');
      isPasswordValid = password === storedPassword;
    }

    if (!isPasswordValid) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
    // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º (–Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (storedPassword && (storedPassword.startsWith('$2b$') || storedPassword.startsWith('$2a$'))) {
      console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, isVerified:', isVerified);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º: isVerified –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ true (–∏–Ω–∞—á–µ –æ—Ç–∫–∞–∑)
      if (isVerified === 0 || isVerified === false || isVerified === null || isVerified === undefined) {
        console.log('‚ùå Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.');
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.');
      }
      console.log('‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω');
    } else {
      // –°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ isVerified —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–≤–Ω–æ 0
      console.log('‚ö†Ô∏è –°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ), isVerified:', isVerified);
      if (isVerified === 0 || isVerified === false) {
        console.log('‚ùå Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.');
      }
    }

    const user = foundUser;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ cookies (—Å–µ—Å—Å–∏–∏)
    const cookieStore = await cookies();
    cookieStore.set('userId', user.id.toString(), {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7 // 7 –¥–Ω–µ–π
    });
    cookieStore.set('userNicName', user.nicName, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7 // 7 –¥–Ω–µ–π
    });
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.nicName);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return { success: true, redirectTo: returnTo || '/dashboard' };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    throw error;
  }
}

export async function logoutUser() {
  const cookieStore = await cookies();
  cookieStore.delete('userId');
  cookieStore.delete('userNicName');
  redirect('/login');
}

export async function getCurrentUser() {
  const cookieStore = await cookies();
  const userId = cookieStore.get('userId')?.value;
  const userNicName = cookieStore.get('userNicName')?.value;
  
  if (!userId) {
    return null;
  }
  
  try {
    const result = await query(`
      SELECT 
        u.id, 
        u.login, 
        u.nicName, 
        u.fullName, 
        u.email, 
        u.phone,
        u.companyId,
        c.companyName,
        CASE 
          WHEN c.ownerId = u.id THEN 1 
          ELSE 0 
        END as isOwner
      FROM [User] u
      LEFT JOIN Company c ON u.companyId = c.id
      WHERE u.id = @userId
    `, { userId: parseInt(userId) });
    
    if (result.length === 0) {
      // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—É–∫–∏—Å–æ–≤
      return {
        id: parseInt(userId),
        nicName: userNicName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        login: '',
        fullName: null,
        email: null,
        phone: null,
        companyId: null,
        companyName: null,
        isOwner: false
      };
    }
    
    const userData = result[0];
    return {
      ...userData,
      isOwner: Boolean(userData.isOwner) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 0/1 –≤ false/true
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—É–∫–∏—Å–æ–≤
    return {
      id: parseInt(userId),
      nicName: userNicName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      login: '',
      fullName: null,
      email: null,
      phone: null,
      companyId: null,
      companyName: null,
      isOwner: false
    };
  }
}
